library(data.table)
library(ggplot2)
library(readxl)
require(tidyverse)
rm(list = ls())
getwd()
hathibaseline <- fread("D:/OneDrive - London School of Hygiene and Tropical Medicine/SNU/HATHI/hathi_baseline.csv")
cols_to_convert <- 7:163
for (colname in names(hathibaseline)[cols_to_convert]) {
hathibaseline[, (colname) := as.integer(.SD[[colname]] == "Yes")]
}
col_to_plot <- c(7:163)
prop_data <- lapply(col_to_plot, function(col) {
prop <- mean(hathibaseline[[col]])
data.frame(col = col, prop = prop)
})
data_to_plot <- do.call(rbind, prop_data)
hathigraph <- hathibaseline[,7:10]
hathigraph <- stack(hathigraph)
ggplot(data_to_plot[1:5,], aes(y=prop, x=col)) +
geom_bar(stat="identity")
cols_to_convert <- 7:163
for (colname in names(hathibaseline)[cols_to_convert]) {
hathibaseline[, (colname) := as.integer(.SD[[colname]] == "Yes")]
}
col_to_plot <- c(7:163)
prop_data <- lapply(col_to_plot, function(col) {
prop <- mean(hathibaseline[[col]])
data.frame(col = col, prop = prop)
})
data_to_plot <- do.call(rbind, prop_data)
View(hathibaseline)
cols_to_convert <- 7:163
for (colname in names(hathibaseline)[cols_to_convert]) {
hathibaseline[, (colname) := as.integer(.SD[[colname]] == "Yes")]
}
View(hathibaseline)
hathibaseline <- fread("D:/OneDrive - London School of Hygiene and Tropical Medicine/SNU/HATHI/hathi_baseline.csv")
View(hathibaseline)
for (colname in names(hathibaseline)[cols_to_convert]) {
hathibaseline[, (colname) := as.integer(.SD[[colname]] == "Yes")]
}
View(hathigraph)
View(hathibaseline)
hathibinary <- fwrite("D:/OneDrive - London School of Hygiene and Tropical Medicine/SNU/HATHI/hathibinary.csv")
hathibinary <- fwrite("D:/OneDrive - London School of Hygiene and Tropical Medicine/SNU/HATHI","hathibinary.csv" )
fwrite(hathibaseline, "D:/OneDrive - London School of Hygiene and Tropical Medicine/SNU/HATHI","hathibinary.csv")
for (colname in names(hathibaseline)[cols_to_convert]) {
hathibaseline[, (colname) := as.integer(.SD[[colname]] == "Yes")]
}
fwrite(hathibaseline, "D:/OneDrive - London School of Hygiene and Tropical Medicine/SNU/HATHI","hathibinary.csv")
for (colname in names(hathibaseline)[cols_to_convert]) {
hathibaseline[, (colname) := as.integer(.SD[[colname]] == "Yes")]
}
fwrite(hathibaseline, "D:/OneDrive - London School of Hygiene and Tropical Medicine/SNU/HATHI/","hathibinary.csv")
fwrite(hathibaseline, "D:/OneDrive - London School of Hygiene and Tropical Medicine/SNU/HATHI/hathibinary.csv")
hathibaseline <- fread("D:/OneDrive - London School of Hygiene and Tropical Medicine/SNU/HATHI/hathi_baseline.csv")
cols_to_convert <- 7:163
for (colname in names(hathibaseline)[cols_to_convert]) {
hathibaseline[, (colname) := as.integer(.SD[[colname]] == "Yes")]
}
View(hathibaseline)
fwrite(hathibaseline, "D:/OneDrive - London School of Hygiene and Tropical Medicine/SNU/HATHI/hathibinary.csv")
View(hathigraph)
View(prop_data)
View(data_to_plot)
View(data_to_plot)
View(hathibaseline)
colMeans(hathibaseline[,7])
df_percent <- colMeans(hathibaseline[,-c(1:6)])
df_percent <- colMeans(hathibaseline[,-1:6])
library(dplyr)
df_percent <- hathibaseline %>%
select(-c(1:6)) %>%
summarise_all(mean, na.rm = TRUE)
View(hathibaseline)
df_percent <- hathibaseline %>%
select(c(7:13)) %>%
summarise_all(mean, na.rm = TRUE)
View(df_percent)
colnames(df_percent) <- paste(1:7)
dfstack <- stack(df_percent)
View(dfstack)
colnames(hathibaseline) <- paste(1:163)
View(hathibaseline)
counts <- colSums(hathibaseline)
counts <- colSums(hathibaseline[,7:13])
counts
count_df <- data.frame(no = counts[1,], yes = counts[2,])
count_df <- data.frame(yes = counts[1,])
counts[1,]
counts
binary_matrix <- matrix(c(1, 0, 1, 1, 0, 0, 1, 1, 1), nrow = 3, byrow = TRUE)
View(binary_matrix)
counts <- colSums(binary_matrix)
counts
colnames(hathibaseline) <- paste(1:163)
counts <- colSums(hathibaseline[,7:13])
count_df <- data.frame(yes = counts[2,])
binary_matrix <- matrix(c(1, 0, 1, 1, 0, 0, 1, 1, 1), nrow = 3, byrow = TRUE)
# count the number of zeros and ones in each column
counts <- colSums(binary_matrix)
# create a new dataframe with the counts
count_df <- data.frame(zeros = counts[1, ], ones = counts[2, ])
colSums(hathibaseline[,7:13])
counts <- data.frame(colSums(hathibaseline[,7:13]))
View(counts)
binary_matrix <- matrix(c(1, 0, 1, 1, 0, 0, 1, 1, 1), nrow = 3, byrow = TRUE)
View(binary_matrix)
counts <- colSums(binary_matrix)
# create a matrix of counts with column and row names
counts_matrix <- matrix(c(counts[1], counts[2], ncol(binary_matrix)-counts[1], ncol(binary_matrix)-counts[2]),
nrow = 2, byrow = TRUE,
dimnames = list(c("0", "1"), c("Zeros", "Ones")))
View(counts_matrix)
View(binary_matrix)
View(binary_matrix)
View(counts_matrix)
View(binary_matrix)
colnames(hathibaseline) <- paste(1:163)
counts <- colSums(hathibaseline[,7:13])
counts[1]
counts[2]
counts
View(hathibaseline)
quantile(hathibaseline[,87:92], c(0.025, 0.5, 0.975))
hathibaseline[is.na(hathibaseline)] <- 0
quantile(hathibaseline[,87:92], c(0.025, 0.5, 0.975))
View(hathibaseline)
hathibaseline[,87:92]
quantile(hathibaseline[,87:92], probs = c(0.025,05,0.975))
quantile(hathibaseline[,87:92], probs = c(0.025, 0.5 ,0.975))
quantile(hathibaseline[,87], probs = c(0.025, 0.5 ,0.975))
quantile(hathibaseline[, c(87:92)], probs = c(0.025, 0.5 ,0.975))
hathibaseline[, c(87:92)]
quantile(hathibaseline[, c(87:92)], probs = c(0.025, 0.5 ,0.975))
ncol(hathibaseline)
hathibaseline[, c(87:92)]
cols <- hathibaseline[, c(87:92)]
quantile(cols, probs = c(0.025, 0.5 ,0.975))
quantile(cols, probs = c(0.025, 0.5 ,0.975))
cols <- hathibaseline[, c(87:92)]
quantile(cols, probs = c(0.025, 0.5 ,0.975))
cols_matrix <- data.matrix(cols)
quantile(cols, probs = c(0.025, 0.5 ,0.975))
quantile(hathibaseline[,87], probs = c(0.025, 0.5 ,0.975))
hathibaseline <- data.frame(hathibaseline)
cols <- hathibaseline[, c(87:92)]
quantile(hathibaseline[,87], probs = c(0.025, 0.5 ,0.975))
quantile(cols, probs = c(0.025, 0.5 ,0.975))
quantile(hathibaseline[, c(87:92)], probs = c(0.025, 0.5 ,0.975))
min_vals <- min(hathibaseline[,c(87:92)])
max_vals <- max(hathibaseline[,c(87:92)])
max_vals
quantile(hathibaseline[,c(87:92)], 0.5)
quantile <- apply(hathibaseline[,87:92], 2, quantile, probs=0.5)
quantile
quantile <- apply(hathibaseline[,87:92], 2, mean)
quantile
meandf <- data.frame(variable = names(mean), value = mean)
meanstack <- stack(meandf)
meandf <- data.frame(variable = names(mean), value = quantile)
meandf <- data.frame(variable = names(quantile), value = quantile)
View(meandf)
meanstack <- stack(meandf)
View(meanstack)
View(meanstack)
View(meandf)
library(pheatmap)
library(meta)
library(rmarkdown)
library(metafor)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
# no dendogram
CountryModel <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/CountryModel.xlsx",
sheet = "postchik")
chronic <- CountryModel[complete.cases(CountryModel$stage) & CountryModel$stage == "chronic", ]
View(chronic)
chronic <- chronic[c(1,3,4,7,18,19,22,29,31,32,34,35,38,41,44,45),]
post.chronic         <- metaprop(N.symptom, N.pos, sm="PLN", data=chronic, studlab=paste(stage,year), comb.fixed=F,
byvar = stage, bylab = "stage", byseparator=":")
chronic.forest       <- forest(post.chronic, print.tau2 = FALSE, col.by="black", text.fixed = "Total",
text.fixed.w = "Subtotal", rightcols = c("effect","ci"),
leftlabs=c("Symptom","Country", "Chronic CHIKV (N)","Symptomatic (N)"),
leftcols = c("symptom_name", "country", "N.symptom", "N.pos"))
chronic.forest       <- forest(post.chronic, print.tau2 = FALSE, col.by="black", text.fixed = "Total",
text.fixed.w = "Subtotal", rightcols = c("effect","ci"),
leftlabs=c("Symptom","Country", "Chronic CHIKV (N)","Symptomatic (N)"),
leftcols = c("symptom_name", "country", "N.symptom", "N.pos"))
CountryModel <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/CountryModel.xlsx",
sheet = "postchik")
chronic <- CountryModel[complete.cases(CountryModel$stage) & CountryModel$stage == "chronic", ]
chronic <- chronic[c(1,3,4,7,18,19,22,29,31,32,34,35,38,41,44,45),]
post.chronic         <- metaprop(N.symptom, N.pos, sm="PLN", data=chronic, studlab=paste(stage,year), comb.fixed=F,
byvar = stage, bylab = "stage", byseparator=":")
chronic.forest       <- forest(post.chronic, print.tau2 = FALSE, col.by="black", text.fixed = "Total",
text.fixed.w = "Subtotal", rightcols = c("effect","ci"),
leftlabs=c("Symptom","Country", "Chronic CHIKV (N)","Symptomatic (N)"),
leftcols = c("symptom_name", "country", "N.symptom", "N.pos"))
CountryModel <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/CountryModel.xlsx",
sheet = "postchik")
chronic <- CountryModel[complete.cases(CountryModel$stage) & CountryModel$stage == "chronic", ]
chronic <- chronic[c(1,3,4,7,18,19,22,29,31,32,34,35,38,41,44,45),]
post.chronic         <- metaprop(N.symptom, N.pos, sm="PLN", data=chronic, studlab=paste(stage,year), comb.fixed=F,
byvar = stage, bylab = "stage", byseparator=":")
chronic.forest       <- forest(post.chronic, print.tau2 = FALSE, col.by="black", text.fixed = "Total",
text.fixed.w = "Subtotal", rightcols = c("effect","ci"),
leftlabs=c("Symptom","Country", "Chronic CHIKV (N)","Symptomatic (N)"),
leftcols = c("symptom_name", "country", "N.symptom", "N.pos"))
CountryModel <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/CountryModel.xlsx",
sheet = "postchik")
chronic <- CountryModel[complete.cases(CountryModel$stage) & CountryModel$stage == "chronic", ]
chronic <- chronic[c(1,3,4,7,18,19,22,29,31,32,34,35,38,41,44,45),]
post.chronic         <- metaprop(N.symptom, N.pos, sm="PLN", data=chronic, studlab=paste(stage,year), comb.fixed=F,
byvar = stage, bylab = "stage", byseparator=":")
chronic.forest       <- forest(post.chronic, print.tau2 = FALSE, col.by="black", text.fixed = "Total",
text.fixed.w = "Subtotal", rightcols = c("effect","ci"),
leftlabs=c("Symptom","Country", "Chronic CHIKV (N)","Symptomatic (N)"),
leftcols = c("symptom_name", "country", "N.symptom", "N.pos"))
fatal <- CountryModel[complete.cases(CountryModel$severity) & CountryModel$severity == "fatal", ]
View(dfstack)
View(fatal)
post.fatal           <- metaprop(N.symptom, N.pos, sm="PLN", data=fatal, studlab=paste(symptom_name,year), comb.fixed=F,
byvar = stage, bylab = "stage", byseparator=":")
fatal.forest         <- forest(post.fatal, print.tau2 = FALSE, col.by="black", text.fixed = "Total",
text.fixed.w = "Subtotal", rightcols = c("effect","ci"),
leftlabs=c("author","country", "Positive","Total"),
leftcols = c("symptom_name", "country", "N.symptom", "N.pos"))
hosp <- CountryModel[complete.cases(CountryModel$severity) & CountryModel$severity == "hospitalisation", ]
hosp.chronic         <- metaprop(N.symptom, N.pos, sm="PLN", data=hosp, studlab=paste(severity,year), comb.fixed=F,
byvar = severity, bylab = "severity", byseparator=":")
hosp.forest       <- forest(hosp.chronic, print.tau2 = FALSE, col.by="black", text.fixed = "Total",
text.fixed.w = "Subtotal", rightcols = c("effect","ci"),
leftlabs=c("Symptom","Country", "Hospitalised CHIKV (N)","Symptomatic (N)"),
leftcols = c("symptom_name", "country", "N.symptom", "N.pos"))
chronic <- CountryModel[complete.cases(CountryModel$stage) & CountryModel$stage == "chronic" & CountryModel$severity == "severe", ]
chronic <- CountryModel[complete.cases(CountryModel$stage) & CountryModel$stage == "chronic", ]
chronic <- chronic[c(1,3,4,7,18,19,22,29,31,32,34,35,38,41,44,45),]
chronic.severe <- CountryModel[complete.cases(CountryModel$stage) & CountryModel$stage == "chronic" & CountryModel$severity == "severe", ]
View(chronic.severe)
chronic.severe <- CountryModel[complete.cases(CountryModel$severity) & CountryModel$stage == "chronic" & CountryModel$severity == "severe", ]
View(chronic.severe)
chronic.severe <- chronic.severe[-c(2:4)]
chronic.severe <- CountryModel[complete.cases(CountryModel$severity) & CountryModel$stage == "chronic" & CountryModel$severity == "severe", ]
chronic.severe <- chronic.severe[-c(2:4),]
post.chronic.severe   <- metaprop(N.symptom, N.pos, sm="PLN", data=chronic.severe, studlab=paste(stage,year), comb.fixed=F,
byvar = stage, bylab = "stage", byseparator=":")
severe.chronic.forest       <- forest(post.chronic.severe, print.tau2 = FALSE, col.by="black", text.fixed = "Total",
text.fixed.w = "Subtotal", rightcols = c("effect","ci"),
leftlabs=c("Symptom","Country", "Chronic CHIKV (N)","Symptomatic (N)"),
leftcols = c("symptom_name", "country", "N.symptom", "N.pos"))
CountryModel <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/CountryModel.xlsx",
sheet = "postchik")
chronic.severe <- CountryModel[complete.cases(CountryModel$severity) & CountryModel$stage == "chronic" & CountryModel$severity == "severe", ]
chronic.severe <- chronic.severe[-c(2:4),]
post.chronic.severe   <- metaprop(N.symptom, N.pos, sm="PLN", data=chronic.severe, studlab=paste(stage,year), comb.fixed=F,
byvar = stage, bylab = "stage", byseparator=":")
severe.chronic.forest       <- forest(post.chronic.severe, print.tau2 = FALSE, col.by="black", text.fixed = "Total",
text.fixed.w = "Subtotal", rightcols = c("effect","ci"),
leftlabs=c("Symptom","Country", "Chronic CHIKV (N)","Symptomatic (N)"),
leftcols = c("symptom_name", "country", "N.symptom", "N.pos"))
library(readxl)
require(tidyverse)
require(rjags)
require(binom)
library(ggplot2)
library(dplyr)
library(varhandle)
require(MCMCvis)
library(cowplot)
library(maps)
library(mapproj)
library(viridis)
library(nord)
world <- map_data("world")
Mapdata <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/CountryModel.xlsx",
sheet = "map_studies")
map <- world %>%
merge(Mapdata, by.x = "region", by.y = "country", all.x = T) %>%
arrange(group, order) %>%
ggplot(aes(x = long, y = lat, group = group, fill = number)) +
geom_polygon(color = "white", size = 0.2) +
scale_fill_viridis(name = "Number of CHIKV studies", na.value = "gray90") +
labs(color = number)+
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank())
Mapdata <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/CountryModel.xlsx",
sheet = "map_studies")
View(Mapdata)
Mapdata <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/CountryModel.xlsx",
sheet = "map_studies")
Mapdata <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/CountryModel.xlsx",
sheet = "map_studies")
map <- world %>%
merge(Mapdata, by.x = "region", by.y = "country", all.x = T) %>%
arrange(group, order) %>%
ggplot(aes(x = long, y = lat, group = group, fill = number)) +
geom_polygon(color = "white", size = 0.2) +
scale_fill_viridis(name = "Number of CHIKV studies", na.value = "gray90") +
labs(color = number)+
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank())
world %>%
merge(Mapdata, by.x = "region", by.y = "country", all.x = T) %>%
arrange(group, order) %>%
ggplot(aes(x = long, y = lat, group = group, fill = number)) +
geom_polygon(color = "white", size = 0.2) +
scale_fill_viridis(name = "Number of CHIKV studies", na.value = "gray90") +
labs(color = number)+
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank())
Mapdata <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/CountryModel.xlsx",
sheet = "map_studies")
map <- world %>%
merge(Mapdata, by.x = "region", by.y = "country", all.x = T) %>%
arrange(group, order) %>%
ggplot(aes(x = long, y = lat, group = group, fill = number)) +
geom_polygon(color = "white", size = 0.2) +
scale_fill_viridis(name = "Number of CHIKV studies", na.value = "gray90") +
labs(color = number)+
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank())
print(map)
print(mapdata)
print(Mapdata)
world %>%
merge(Mapdata, by.x = "region", by.y = "country", all.x = T) %>%
arrange(group, order) %>%
ggplot(aes(x = long, y = lat, group = group, fill = number)) + geom_polygon()+
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()) +
labs(fill = "Number of CHIKV studies")
world %>%
merge(Mapdata, by.x = "region", by.y = "country", all.x = T) %>%
arrange(group, order) %>%
ggplot(aes(x = long, y = lat, group = group, fill = number)) +
geom_polygon(color = "white", size = 0.2) +
scale_fill_viridis(name = "Number of CHIKV studies", na.value = "gray90") +
labs(color = number)+
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank())
world %>%
merge(Mapdata, by.x = "region", by.y = "country", all.x = T) %>%
arrange(group, order) %>%
ggplot(aes(x = long, y = lat, group = group, fill = number)) +
geom_polygon(color = "white", size = 0.2) +
scale_fill_viridis(name = "Number of CHIKV studies", na.value = "gray90")
world %>%
merge(Mapdata, by.x = "region", by.y = "country", all.x = T) %>%
arrange(group, order) %>%
ggplot(aes(x = long, y = lat, group = group, fill = number)) +
geom_polygon(color = "white", size = 0.2) +
scale_fill_viridis(name = "Number of CHIKV studies", na.value = "gray90") +
labs(color = number)+
theme_minimal()
world %>%
merge(Mapdata, by.x = "region", by.y = "country", all.x = T) %>%
arrange(group, order) %>%
ggplot(aes(x = long, y = lat, group = group, fill = number)) +
geom_polygon(color = "white", size = 0.2) +
scale_fill_viridis(name = "Number of CHIKV studies", na.value = "gray90") +
labs(color = "number")+
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank())
print(world)
View(world)
fwrite(world, "D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/world.csv")
View(severe.chronic.forest)
Mapdata <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/CountryModel.xlsx",
sheet = "map_studies")
map <- world %>%
merge(Mapdata, by.x = "region", by.y = "country", all.x = T) %>%
arrange(group, order) %>%
ggplot(aes(x = long, y = lat, group = group, fill = number)) +
geom_polygon(color = "white", size = 0.2) +
scale_fill_viridis(name = "Number of CHIKV studies", na.value = "gray90") +
labs(color = "number")+
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank())
map
