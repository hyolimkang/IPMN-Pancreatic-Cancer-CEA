"incidence","burden","susprop")]
setDT(burden)
# return
return(burden = burden)
}
result_burden22 <- allburden(cohort          = thaicohort22,
burden_prevacc  = burden_prevacc22,
burden_postvacc = burden_postvacc22,
IncidenceDf     = IncidenceDf1,
susprop_prevacc = thaisusprop,
susprop_postvac = susprop_postvacc22)
BurdenCalculation <- function(cohort, susprop, IncidenceDf) {
# vaccinated population
vacc           <- susprop
vacc[,1:12]    <- 0
vacc[,13]      <- susprop[,13]*0.9*0.7
vacc[,13:101]   <- vacc[,13]
colnames(vacc) <- paste(0:100)
# susceptible population (pre-vacc)
suspop_prevacc <- cohort*susprop
# burden in terms of number of cases (pre-vacc)
burden_prevacc <- as.data.frame(suspop_prevacc*IncidenceDf)
# post-vacc susceptible proportion
susprop_postvacc <- susprop
susprop_postvacc[,13:101] <- susprop_postvacc[,13:101]*(1- 0.9*0.7)        # susceptible prop >12yrs old: susceptible*(1-ve*vc)
susprop_postvacc <- as.data.frame(susprop_postvacc)
colnames(susprop_postvacc) <- paste(0:100)
# susceptible population (post-vacc)
suspop_postvacc <- as.data.frame(susprop_postvacc*cohort)
# burden in terms of number of cases (post-vacc)
burden_postvacc <- susprop
burden_postvacc <- suspop_postvacc*IncidenceDf
# Impact
Impact <- burden_prevacc - burden_postvacc
# return lists
return(list(suspop_prevacc   = suspop_prevacc,
burden_prevacc   = burden_prevacc,
susprop_postvacc = susprop_postvacc,
suspop_postvacc  = suspop_postvacc,
burden_postvacc  = burden_postvacc,
Impact           = Impact,
vacc             = vacc))
}
allburden <- function(cohort, burden_prevacc, burden_postvacc, IncidenceDf,
susprop_prevacc, susprop_postvac) {
# tyding prevacc data -- making it as a long-format data
prevacc            <- stack(burden_prevacc)
prevacc$scenario   <- c("prevacc")
prevacc$run_id     <- rep(1:1000,times=101)
postvacc           <- stack(burden_postvacc)
postvacc$scenario  <- c("postvacc")
postvacc$run_id    <- rep(1:1000,times=101)
burden             <- rbind(prevacc,postvacc)
# tyding incidence data -- making it as a long-format data
IncidenceDf               <- as.data.frame(IncidenceDf)
inc.chik                  <- stack(IncidenceDf)
colnames(inc.chik)        <-c("incidence","age")
burden                    <- cbind(burden, inc.chik$incidence)
cohort.size               <- stack(cohort)
colnames(cohort.size)     <- c("cohort_size","age")
burden                    <- cbind(burden,cohort.size$cohort_size)
# tyding susceptible data -- making it as a long-format data
susprop_prevacc           <- as.data.frame(susprop_prevacc)
susprop_prevacc           <- stack(susprop_prevacc)
susprop_prevacc$scenario  <- c("prevacc")
susprop_postvacc          <- as.data.frame(susprop_postvacc)
susprop_postvacc          <- stack(susprop_postvacc)
susprop_postvacc$scenario <- c("postvacc")
susprop                   <- rbind(susprop_prevacc,susprop_postvacc)
colnames(susprop)         <- c("susprop","age","scenario")
burden                    <- cbind(burden,susprop$susprop)
colnames(burden)          <- c("burden","age","scenario","run_id","incidence","cohort_size","susprop")
burden                    <- burden[,c("scenario","age","run_id","cohort_size",
"incidence","burden","susprop")]
setDT(burden)
# return
return(burden = burden)
}
thaicohort22 <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/epidemic_FOI_Oli.xlsx",
sheet = "2022cohort")
thaicohort22 <- 1000*thaicohort22
burden22 <- BurdenCalculation(cohort      = thaicohort22,
susprop     = thaisusprop,
IncidenceDf = IncidenceDf1)
burden22Df           <- lapply(burden22, as.data.frame)
suspop_prevacc22     <- burden22Df[[1]]
burden_prevacc22     <- burden22Df[[2]]
susprop_postvacc22   <- burden22Df[[3]]
suspop_postvacc22    <- burden22Df[[4]]
burden_postvacc22    <- burden22Df[[5]]
Impact22             <- burden22Df[[6]]
View(susprop_postvacc22)
result_burden22 <- allburden(cohort          = thaicohort22,
burden_prevacc  = burden_prevacc22,
burden_postvacc = burden_postvacc22,
IncidenceDf     = IncidenceDf1,
susprop_prevacc = thaisusprop,
susprop_postvac = susprop_postvacc22)
susprop_postvacc22 <- as.data.frame(susprop_postvacc22)
result_burden22 <- allburden(cohort          = thaicohort22,
burden_prevacc  = burden_prevacc22,
burden_postvacc = burden_postvacc22,
IncidenceDf     = IncidenceDf1,
susprop_prevacc = thaisusprop,
susprop_postvac = susprop_postvacc22)
result_burden22 <- allburden(cohort          = thaicohort22,
burden_prevacc  = burden_prevacc22,
burden_postvacc = burden_postvacc22,
IncidenceDf     = IncidenceDf1,
susprop_prevacc = thaisusprop,
susprop_postvac = susprop_postvacc22)
suspop_postvacc22
suspop_prevacc22
burden_postvacc22
Impact22
View(susprop_postvacc22)
burden22Df           <- lapply(burden22, as.data.frame)
suspop_prevacc22     <- burden22Df[[1]]
burden_prevacc22     <- burden22Df[[2]]
susprop_postvacc22   <- burden22Df[[3]]
suspop_postvacc22    <- burden22Df[[4]]
burden_postvacc22    <- burden22Df[[5]]
Impact22             <- burden22Df[[6]]
result_burden22 <- allburden(cohort          = thaicohort22,
burden_prevacc  = burden_prevacc22,
burden_postvacc = burden_postvacc22,
IncidenceDf     = IncidenceDf1,
susprop_prevacc = thaisusprop,
susprop_postvac = susprop_postvacc22)
remove (list = objects() )
source("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/codes/CHIK/CatalyticEastAsiaEndemic.R")
source("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/codes/CHIK/ImpactEst.R")
BurdenCalculation <- function(cohort, susprop, IncidenceDf) {
# vaccinated population
vacc           <- susprop
vacc[,1:12]    <- 0
vacc[,13]      <- susprop[,13]*0.9*0.7
vacc[,13:101]   <- vacc[,13]
colnames(vacc) <- paste(0:100)
# susceptible population (pre-vacc)
suspop_prevacc <- cohort*susprop
# burden in terms of number of cases (pre-vacc)
burden_prevacc <- as.data.frame(suspop_prevacc*IncidenceDf)
# post-vacc susceptible proportion
susprop_postvacc <- susprop
susprop_postvacc[,13:101] <- susprop_postvacc[,13:101]*(1- 0.9*0.7)        # susceptible prop >12yrs old: susceptible*(1-ve*vc)
susprop_postvacc <- as.data.frame(susprop_postvacc)
colnames(susprop_postvacc) <- paste(0:100)
# susceptible population (post-vacc)
suspop_postvacc <- as.data.frame(susprop_postvacc*cohort)
# burden in terms of number of cases (post-vacc)
burden_postvacc <- susprop
burden_postvacc <- suspop_postvacc*IncidenceDf
# Impact
Impact <- burden_prevacc - burden_postvacc
# return lists
return(list(suspop_prevacc   = suspop_prevacc,
burden_prevacc   = burden_prevacc,
susprop_postvacc = susprop_postvacc,
suspop_postvacc  = suspop_postvacc,
burden_postvacc  = burden_postvacc,
Impact           = Impact,
vacc             = vacc))
}
allburden <- function(cohort, burden_prevacc, burden_postvacc, IncidenceDf,
susprop_prevacc, susprop_postvac) {
# tyding prevacc data -- making it as a long-format data
prevacc            <- stack(burden_prevacc)
prevacc$scenario   <- c("prevacc")
prevacc$run_id     <- rep(1:1000,times=101)
postvacc           <- stack(burden_postvacc)
postvacc$scenario  <- c("postvacc")
postvacc$run_id    <- rep(1:1000,times=101)
burden             <- rbind(prevacc,postvacc)
# tyding incidence data -- making it as a long-format data
IncidenceDf               <- as.data.frame(IncidenceDf)
inc.chik                  <- stack(IncidenceDf)
colnames(inc.chik)        <-c("incidence","age")
burden                    <- cbind(burden, inc.chik$incidence)
cohort.size               <- stack(cohort)
colnames(cohort.size)     <- c("cohort_size","age")
burden                    <- cbind(burden,cohort.size$cohort_size)
# tyding susceptible data -- making it as a long-format data
susprop_prevacc           <- as.data.frame(susprop_prevacc)
susprop_prevacc           <- stack(susprop_prevacc)
susprop_prevacc$scenario  <- c("prevacc")
susprop_postvacc          <- as.data.frame(susprop_postvacc)
susprop_postvacc          <- stack(susprop_postvacc)
susprop_postvacc$scenario <- c("postvacc")
susprop                   <- rbind(susprop_prevacc,susprop_postvacc)
colnames(susprop)         <- c("susprop","age","scenario")
burden                    <- cbind(burden,susprop$susprop)
colnames(burden)          <- c("burden","age","scenario","run_id","incidence","cohort_size","susprop")
burden                    <- burden[,c("scenario","age","run_id","cohort_size",
"incidence","burden","susprop")]
setDT(burden)
# return
return(burden = burden)
}
thaicohort22 <- read_excel("D:/OneDrive - London School of Hygiene and Tropical Medicine/CHIK/1.Aim1/all_countries/epidemic_FOI_Oli.xlsx",
sheet = "2022cohort")
thaicohort22 <- 1000*thaicohort22
burden22 <- BurdenCalculation(cohort      = thaicohort22,
susprop     = thaisusprop,
IncidenceDf = IncidenceDf1)
burden22Df           <- lapply(burden22, as.data.frame)
suspop_prevacc22     <- burden22Df[[1]]
burden_prevacc22     <- burden22Df[[2]]
susprop_postvacc22   <- burden22Df[[3]]
suspop_postvacc22    <- burden22Df[[4]]
burden_postvacc22    <- burden22Df[[5]]
Impact22             <- burden22Df[[6]]
result_burden22 <- allburden(cohort          = thaicohort22,
burden_prevacc  = burden_prevacc22,
burden_postvacc = burden_postvacc22,
IncidenceDf     = IncidenceDf1,
susprop_prevacc = thaisusprop,
susprop_postvac = susprop_postvacc22)
allburden <- function(cohort, burden_prevacc, burden_postvacc, IncidenceDf,
susprop_prevacc, susprop_postvacc) {
# tyding prevacc data -- making it as a long-format data
prevacc            <- stack(burden_prevacc)
prevacc$scenario   <- c("prevacc")
prevacc$run_id     <- rep(1:1000,times=101)
postvacc           <- stack(burden_postvacc)
postvacc$scenario  <- c("postvacc")
postvacc$run_id    <- rep(1:1000,times=101)
burden             <- rbind(prevacc,postvacc)
# tyding incidence data -- making it as a long-format data
IncidenceDf               <- as.data.frame(IncidenceDf)
inc.chik                  <- stack(IncidenceDf)
colnames(inc.chik)        <-c("incidence","age")
burden                    <- cbind(burden, inc.chik$incidence)
cohort.size               <- stack(cohort)
colnames(cohort.size)     <- c("cohort_size","age")
burden                    <- cbind(burden,cohort.size$cohort_size)
# tyding susceptible data -- making it as a long-format data
susprop_prevacc           <- as.data.frame(susprop_prevacc)
susprop_prevacc           <- stack(susprop_prevacc)
susprop_prevacc$scenario  <- c("prevacc")
susprop_postvacc          <- as.data.frame(susprop_postvacc)
susprop_postvacc          <- stack(susprop_postvacc)
susprop_postvacc$scenario <- c("postvacc")
susprop                   <- rbind(susprop_prevacc,susprop_postvacc)
colnames(susprop)         <- c("susprop","age","scenario")
burden                    <- cbind(burden,susprop$susprop)
colnames(burden)          <- c("burden","age","scenario","run_id","incidence","cohort_size","susprop")
burden                    <- burden[,c("scenario","age","run_id","cohort_size",
"incidence","burden","susprop")]
setDT(burden)
# return
return(burden = burden)
}
result_burden22 <- allburden(cohort          = thaicohort22,
burden_prevacc  = burden_prevacc22,
burden_postvacc = burden_postvacc22,
IncidenceDf     = IncidenceDf1,
susprop_prevacc = thaisusprop,
susprop_postvac = susprop_postvacc22)
result_burden22 <- allburden(cohort          = thaicohort22,
burden_prevacc  = burden_prevacc22,
burden_postvacc = burden_postvacc22,
IncidenceDf     = IncidenceDf1,
susprop_prevacc = thaisusprop,
susprop_postvacc = susprop_postvacc22)
View(result_burden22)
IncidenceDf = IncidenceDf1)
burden22Df           <- lapply(burden22, as.data.frame)
suspop_prevacc22     <- burden22Df[[1]]
burden_prevacc22     <- burden22Df[[2]]
susprop_postvacc22   <- burden22Df[[3]]
suspop_postvacc22    <- burden22Df[[4]]
burden_postvacc22    <- burden22Df[[5]]
Impact22             <- burden22Df[[6]]
result_burden22 <- allburden(cohort          = thaicohort22,
burden_prevacc  = burden_prevacc22,
burden_postvacc = burden_postvacc22,
IncidenceDf     = IncidenceDf1,
susprop_prevacc = thaisusprop,
susprop_postvacc = susprop_postvacc22)
burden22 <- BurdenCalculation(cohort      = thaicohort22,
susprop     = thaisusprop,
IncidenceDf = IncidenceDf1)
burden22Df           <- lapply(burden22, as.data.frame)
suspop_prevacc22     <- burden22Df[[1]]
burden_prevacc22     <- burden22Df[[2]]
susprop_postvacc22   <- burden22Df[[3]]
suspop_postvacc22    <- burden22Df[[4]]
burden_postvacc22    <- burden22Df[[5]]
Impact22             <- burden22Df[[6]]
result_burden22 <- allburden(cohort          = thaicohort22,
burden_prevacc  = burden_prevacc22,
burden_postvacc = burden_postvacc22,
IncidenceDf     = IncidenceDf1,
susprop_prevacc = thaisusprop,
susprop_postvacc = susprop_postvacc22)
rm(list = ls())    # remove any variables in R's memory
### Load packages
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
library(gridExtra)
library(scales)
library(boot)
library(dampack)
options(scipen = 999)
cycle.length <- 0.5  # 6months (=0.5 year) for basic cycle length
n.age.init   <- 60   # age60 as a baseline
n.age.max    <- 100  # age100 as a max
n.cycles     <- (n.age.max - n.age.init)/cycle.length  # time horizon, number of cycles
state.names  <- c("<1cm","1-2cm","2-3cm","WF","Cancer","Death") # 3diff cyst sizes, worrisome feature, cancer, death
n.states     <- length(state.names) # number of states in disease progression
surgery.name <- c("No comp", "Comp", "Cancer", "Death") # states in surgery markov
s.states     <- length(surgery.name)
d_e          <- 0.03 # annual discount rate for DALY 3%
d_c          <- 0.03 # annual discount rate for cost 3%
names.strat  <- c("surgery","surveillance")
n.strat      <- length(names.strat)
r_H1D        <- (0.042533081/2) # rate of dying for <1cm cohort (all-cause mortality)
r_H1WF       <- (0.02173913/2) # rate of transitioning from <1cm to WF
r_H1C        <- (0.013232514/2)# rate of transitioning from <1cm to cancer
r_H1H2       <- 0.3# rate of transitioning from <1cm to 1-2cm
r_H1H3       <- 0.001 # rate of transitioning form <1cm to 2-3cm
r_H2H3       <- 0.45# rate of transitioning from 1-2cm to 2-3cm
hrd_H2       <- 1.310 # hazard ratio of death in <1cm vs. 1-2cm
hrd_H3       <- 2.425 # hazard ratio of death in <1cm vs. 2-3cm
hrw_H2       <- 1.593 # hazard ratio of WF in <1cm vs. 1-2cm
hrw_H3       <- 4.491 # hazard ratio of WF in <1cm vs. 2-3cm
hrc_H2       <- 2.406 # hazard ratio of cancer in <1cm vs. 1-2cm
hrc_H3       <- 6.149 # hazard ratio of cancer in <1cm vs. 2-3cm
hrc_WF       <- 7.7# hazard ratio of cancer in <1cm vs. WF
hrd_WF       <- 5.5# hazard ratio of death in <1cm vs. WF
hrd_C        <- 7.6# hazard ratio of death in <1cm vs. Cancer
d_H1             <- 1058/(1058+1728+617)
d_H2             <- 1728/(1058+1728+617)
d_H3             <- 617/(1058+1728+617)
d_H1WF           <- 23/1058
d_H2WF           <- 69/1728
d_H3WF           <- 103/617
d_H1WFSurg       <- (7/23)*d_H1WF
d_H2WFSurg       <- (44/69)*d_H2WF
d_H3WFSurg       <- (94/103)*d_H3WF
#transform rates into transition probs
p_H1H2           <- 1 - exp(-r_H1H2*cycle.length)
p_H1H3           <- 1 - exp(-r_H1H3*cycle.length)
p_H2H3           <- 1 - exp(-r_H2H3*cycle.length)
p_H1WF           <- 1 - exp(-r_H1WF*cycle.length)
p_H1C            <- 1 - exp(-r_H1C*cycle.length)
p_H1D            <- 1 - exp(-r_H1D*cycle.length)
p_H2WF           <- 1 - exp(-r_H1WF*hrw_H2*cycle.length)
p_H2C            <- 1 - exp(-r_H1C*hrc_H2*cycle.length)
p_H2D            <- 1 - exp(-r_H1D*hrd_H2*cycle.length)
p_H3WF           <- 1 - exp(-r_H1WF*hrw_H3*cycle.length)
p_H3C            <- 1 - exp(-r_H1C*hrc_H3*cycle.length)
p_H3D            <- 1 - exp(-r_H1D*hrd_H3*cycle.length)
p_WFC            <- 1 - exp(-r_H1C*hrc_WF*cycle.length)
p_WFD            <- 1 - exp(-r_H1D*hrd_WF*cycle.length)
p_CD             <- 1 - exp(-r_H1D*hrd_C*cycle.length)
init.surgery     <- c("Nocomp"= d_H1WFSurg, "Comp"=0, "Cancer"=0, "Death"=0) # apply surgery markov
init.surv        <- c("H1"= 0,"H2"= 0,"H3"= 0,"WF"= d_H1WF - d_H1WFSurg,"Cancer"= 0,"Death"= 0)# apply disease markov
init.noWF        <- c("H1" = d_H1-d_H1WF, "H2"= 0,"H3"= 0,"WF"= 0,"Cancer"= 0,"Death"= 0)# apply disease markov
#cohort trace matrix: Distribution of the cohorts
m_M_surgery1     <- matrix(NA, nrow = (n.cycles+1), ncol=s.states,
dimnames = list(0:n.cycles, surgery.name))
m_M_surgery1[1,] <- init.surgery
m_M_surv         <- matrix(NA, nrow = (n.cycles+1), ncol=n.states,
dimnames = list(0:n.cycles, state.names))
m_M_surv[1,]     <- init.surv
m_M_noWf         <- matrix(NA, nrow = (n.cycles+1), ncol=n.states,
dimnames = list(0:n.cycles, state.names))
m_M_noWf[1,]     <- init.noWF
#transition probability matrix for disease progression: 6*6 matrix
m_P                   <- matrix(0, nrow    = n.states, ncol=n.states,
dimnames    = list(state.names, state.names))
m_P["<1cm","1-2cm"]   <- p_H1H2
m_P["<1cm","2-3cm"]   <- p_H1H3
m_P["<1cm","WF"]      <- p_H1WF
m_P["<1cm","Cancer"]  <- p_H1C
m_P["<1cm","Death"]   <- p_H1D
m_P["<1cm","<1cm"]    <- 1 - (p_H1H2 + p_H1H3 + p_H1WF + p_H1C + p_H1D)
m_P["1-2cm","<1cm"]   <- 0
m_P["1-2cm","2-3cm"]  <- p_H2H3
m_P["1-2cm","WF"]     <- p_H2WF
m_P["1-2cm","Cancer"] <- p_H2C
m_P["1-2cm","Death"]  <- p_H2D
m_P["1-2cm","1-2cm"]  <- 1 - (p_H2H3 + p_H2WF + p_H2C + p_H2D)
m_P["2-3cm","<1cm"]   <- 0
m_P["2-3cm","1-2cm"]  <- 0
m_P["2-3cm","WF"]     <- p_H3WF
m_P["2-3cm","Cancer"] <- p_H3C
m_P["2-3cm","Death"]  <- p_H3D
m_P["2-3cm","2-3cm"]  <- 1 - (p_H3WF + p_H3C + p_H3D)
m_P["WF","Cancer"]    <- p_WFC
m_P["WF","Death"]     <- p_WFD
m_P["WF","WF"]        <- 1 - (p_WFC + p_WFD)
m_P["Cancer","Death"] <- p_CD
m_P["Cancer","Cancer"]<- 1 - p_CD
m_P["Death", "Death"] <- 1
m_S          <- matrix(0, nrow  = s.states, ncol=s.states,
dimnames = list(surgery.name, surgery.name))
#check if transition matrix is valid
rowSums(m_P) == 1
for(t in 1:n.cycles) {
m_M_noWf[t+1, ] <- m_M_noWf[t, ] %*% m_P
}
# check
rowSums(m_M_noWf)
m_M_noWf <- as.data.frame(m_M_noWf)
noWfStack <- stack(m_M_noWf)
noWfStack$cycle <- rep(0:80, time(6))
colnames(noWfStack) <- c("Proportion", "Health state", "Cycle")
ggplot(noWfStack, aes(x = Cycle, y = Proportion))+
geom_line()+
facet_wrap(~`Health state`)
labs(title = col)+
theme_minimal()
ggplot(noWfStack, aes(x = Cycle, y = Proportion, color = `Health state`)) +
geom_line() +
labs(title = col) +
theme_minimal()
View(noWfStack)
library(ggplot2)
library(ggforce)
ggplot(noWfStack, aes(x = Cycle, y = Proportion, color = `Health state`)) +
geom_line() +
labs(title = col) +
theme_minimal()
m_M_noWf <- as.data.frame(m_M_noWf)
noWfStack <- stack(m_M_noWf)
noWfStack$cycle <- rep(0:80, time(6))
colnames(noWfStack) <- c("Proportion", "State", "Cycle")
ggplot(noWfStack, aes(x = Cycle, y = Proportion))+
geom_line()+
facet_wrap(~`Health state`)
labs(title = col)+
theme_minimal()
ggplot(noWfStack, aes(x = Cycle, y = Proportion, color = "State")) +
geom_line() +
labs(title = col) +
theme_minimal()
ggplot(noWfStack, aes(x = Cycle, y = Proportion))+
geom_line()+
facet_wrap(~`State`)
labs(title = col)+
theme_minimal()
ggplot(noWfStack, aes(x = Cycle, y = Proportion, color = State)) +
geom_line() +
labs(title = col) +
theme_minimal()
class(col)
ggplot(noWfStack, aes(x = Cycle, y = Proportion, color = State)) +
geom_line() +
#labs(title = col) +
theme_minimal()
ggplot(noWfStack, aes(x = Cycle, y = Proportion))+
geom_line()+
facet_wrap(~`State`)
#labs(title = col)+
theme_minimal()
ggplot(noWfStack, aes(x = Cycle, y = Proportion))+
geom_line()+
facet_wrap(~`State`)+
#labs(title = col)+
theme_minimal()
#uncertainty
# Set the row index to fill in
row_index <- 1
# Loop over the columns of the row and sample values from the corresponding distributions
for (i in seq_along(m_M_surgery1[row_index,])) {
# Sample a value from the distribution
if (distributions[i] == "normal") {
sample_value <- rnorm(1, mean = params[[i]]$mean, sd = params[[i]]$sd)
} else if (distributions[i] == "lognormal") {
sample_value <- rlnorm(1, meanlog = params[[i]]$meanlog, sdlog = params[[i]]$sdlog)
} else if (distributions[i] == "gamma") {
sample_value <- rgamma(1, shape = params[[i]]$shape, rate = params[[i]]$rate)
} else if (distributions[i] == "exponential") {
sample_value <- rexp(1, rate = params[[i]]$rate)
}
# Assign the sampled value to the dataframe
m_M_surgery1[row_index, i] <- sample_value
}
################################ Initial setup ###############################
rm(list = ls())    # remove any variables in R's memory
### Load packages
library(dplyr)
library(tidyr)
library(reshape2)
library(ggplot2)
library(gridExtra)
library(scales)
library(boot)
library(dampack)
library(ggplot2)
library(ggforce)
options(scipen = 999)
cycle.length <- 0.5  # 6months (=0.5 year) for basic cycle length
n.age.init   <- 60   # age60 as a baseline
n.age.max    <- 100  # age100 as a max
n.cycles     <- (n.age.max - n.age.init)/cycle.length  # time horizon, number of cycles
state.names  <- c("<1cm","1-2cm","2-3cm","WF","Cancer","Death") # 3diff cyst sizes, worrisome feature, cancer, death
n.states     <- length(state.names) # number of states in disease progression
surgery.name <- c("Surg", "No comp", "Comp", "Cancer", "Death") # states in surgery markov
s.states     <- length(surgery.name)
d_e          <- 0.03 # annual discount rate for DALY 3%
d_c          <- 0.03 # annual discount rate for cost 3%
names.strat  <- c("surgery","surveillance")
n.strat      <- length(names.strat)
(0.02173913/2)
r_H1WF       <- (0.02173913/2) # rate of transitioning from <1cm to WF
0.06078431/r_H1WF
